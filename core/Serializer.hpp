#pragma once
#include "QvPluginProcessor.hpp"

#include <QObject>

class SimpleSerializer : public Qv2rayPlugin::QvPluginSerializer
{
    Q_OBJECT
  public:
    explicit SimpleSerializer(QObject *parent = nullptr) : QvPluginSerializer(parent){};
    const QString SerializeOutbound(const QString &protocol,  //
                                    const QString &alias,     //
                                    const QString &groupName, //
                                    const QJsonObject &object) const override
    {
        Q_UNUSED(protocol)
        Q_UNUSED(alias)
        Q_UNUSED(groupName)
        Q_UNUSED(object)
        return "fake://Fake:Shared@Link:By?Simple=Plugin";
    }
    const QPair<QString, QJsonObject> DeserializeOutbound(const QString &link, QString *alias, QString *errorMessage) const override
    {
        *alias = "fake://alias";
        *errorMessage = "";
        return //
            {
                "fake:alias",
                {
                    { "type", "fakeOutbound" },           //
                    { "generated by", "QvSimplePlugin" }, //
                    { "link", link }                      //
                }                                         //
            };
    }
    const Qv2rayPlugin::QvPluginOutboundInfoObject GetOutboundInfo(const QString &protocol, const QJsonObject &outbound) const override
    {
        Q_UNUSED(protocol)
        Q_UNUSED(outbound)
        return Qv2rayPlugin::QvPluginOutboundInfoObject{ "fakeHost", "fakeProtocol", 12345 };
    }
    const QList<QString> ShareLinkPrefixes() const override
    {
        return { "fake://" };
    }
    const QList<QString> OutboundProtocols() const override
    {
        return { "fake protocol" };
    }
};
